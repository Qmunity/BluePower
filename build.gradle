plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
}

project.ext {
    major = mod_version_major
    minor = mod_version_minor
    if (System.getenv("CI_PIPELINE_IID") != null) {
        build = System.getenv("CI_PIPELINE_IID") + "-alpha"
    } else {
        build = "x-custom"
    }
    mcVersion = minecraft_version
}

version = "${project.ext.major}.${project.minor}.${project.build}"
group = "com.bluepowermod"
base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
       programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        // location of the maven that hosts Jade/WAILA files
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Modmaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
    compileOnly "curse.maven:${jade_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range, mod_version: version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title": "bluepower",
                    "Specification-Vendor": "qmunity",
                    "Specification-Version": "28.0",
                    "Implementation-Title": project.name,
                    "Implementation-Version": project.jar.archiveVersion,
                    "Implementation-Vendor" :"qmunity",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    archiveAppendix = "${project.ext.mcVersion}"
    archiveClassifier = "universal"
    finalizedBy 'reobfJar'
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        archiveAppendix = "${project.ext.mcVersion}"
        archiveClassifier = "deobf"
    }
}

// Create API library zip
task apiZip(type: Zip) {
    from(sourceSets.main.java) {
        include 'com/bluepowermod/api/**'
        archiveAppendix = "${project.ext.mcVersion}"
        archiveClassifier = "api"
    }
}

apiZip.mustRunAfter deobfJar

artifacts {
    archives deobfJar
    archives apiZip
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}